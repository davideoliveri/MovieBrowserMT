import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import http from 'node:http';
import express from 'express';
import { createServer as createViteServer } from 'vite';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const resolve = (p) => path.resolve(__dirname, p);
const isProd = process.env.NODE_ENV === 'production';
const PORT = process.env.PORT || 3000;

/* -------------------------------------------------------------------------- */
/*                               SSR HANDLER                                  */
/* -------------------------------------------------------------------------- */
function makeSsrHandler(vite) {
  return async function ssrHandler(req, res, next) {
    /* skip pure‑asset requests */
    if (
      /\.\w+$/.test(req.originalUrl) ||
      req.originalUrl.startsWith('/@vite/')
    ) {
      return next();
    }

    try {
      /* 1. read template + get render() */
      let template, render;

      if (!isProd) {
        template = await fs.readFile(resolve('index.html'), 'utf-8');
        template = await vite.transformIndexHtml(req.originalUrl, template);
        ({ render } = await vite.ssrLoadModule('/src/entry-server.tsx'));
      } else {
        template = await fs.readFile(
          resolve('dist/client/index.html'),
          'utf-8'
        );

        /* inject production CSS */
        const manifest = JSON.parse(
          await fs.readFile(
            resolve('dist/client/.vite/ssr-manifest.json'),
            'utf-8'
          )
        );
        const entryChunk = manifest['index.html'];
        if (entryChunk?.css) {
          const cssLinks = entryChunk.css
            .map((f) => `<link rel="stylesheet" href="/${f}">`)
            .join('');
          template = template.replace('</head>', `${cssLinks}</head>`);
        }

        ({ render } = await import('./dist/server/entry-server.js'));
      }

      /* 2. render React */
      const { html: renderedHtml, context } = await render(req);

      /* pull out <link rel="preload">s generated by React 19 */
      const preloadLinks = [];
      const preloadRe = /<link rel="preload".*?\/?>/g;
      let appHtml = renderedHtml;
      for (let m; (m = preloadRe.exec(renderedHtml)); ) preloadLinks.push(m[0]);
      appHtml = renderedHtml.replace(preloadRe, '');

      /* 3. stitch final document */
      let finalHtml = template
        .replace('<!--app-html-->', appHtml) // ① inject app
        .replace('</head>', preloadLinks.join('') + '</head>'); // ② inject preloads

      res
        .status(context?.statusCode || 200)
        .set({ 'Content-Type': 'text/html' })
        .end(finalHtml);
    } catch (e) {
      if (e instanceof Response) {
        return res.redirect(e.status, e.headers.get('Location') || '/');
      }
      if (vite && !isProd) vite.ssrFixStacktrace(e);
      next(e);
    }
  };
}

/* -------------------------------------------------------------------------- */
/*                     CREATE DEV OR PROD SERVER                              */
/* -------------------------------------------------------------------------- */
const app = express();
async function createServer() {
  /* ------------------------------- DEV ------------------------------------ */
  if (!isProd) {
    const httpServer = http.createServer(app);

    const vite = await createViteServer({
      server: { middlewareMode: true, hmr: { server: httpServer } },
      appType: 'custom',
    });

    app.use(vite.middlewares); // Vite assets + HMR
    app.use('/{*splat}/', makeSsrHandler(vite)); // SSR

    httpServer.listen(PORT, () =>
      console.log(`⚡  Dev server:  http://localhost:${PORT}`)
    );
    return;
  }

  /* --------------------------- PRODUCTION --------------------------------- */
  const compression = (await import('compression')).default;
  const sirv = (await import('sirv')).default;

  app.use(compression());
  app.use(
    '/assets',
    sirv(resolve('dist/client/assets'), { immutable: true, maxAge: 31536000 })
  );
  app.use(express.static(resolve('dist/client'), { index: false }));
  app.use('/{*splat}/', makeSsrHandler(undefined)); // SSR with pre‑built bundle

  app.listen(PORT, () =>
    console.log(`✅ Prod server: http://localhost:${PORT}`)
  );
}

createServer();

export default app;
